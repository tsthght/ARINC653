function  [SEMAPHORE_ID,RETURN_CODE] = CREATE_SEMAPHORE( SEMAPHORE_NAME,CURRENT_VALUE,MAXIMUM_VALUE,QUEUING_DISCIPLINE )

global RETURN_CODE_TYPE;
global OPERATING_MODE_TYPE;
global Semaphore_Set;
global Semaphore_NAME_Set;
global Semaphore_ID_Set;
global Current_Partition_STATUS;
global System_Limit_Number_Of_Semaphores;
global MAX_SEMAPHORE_VALUE;
global FIFO;
global PRIORITY_ORDER;

CURRENT_NUMBER_OF_SEMAPHORE = numel(Semaphore_Set);
if CURRENT_NUMBER_OF_SEMAPHORE >= System_Limit_Number_Of_Semaphores
    RETURN_CODE = RETURN_CODE_TYPE.INVALID_CONFIG;
    SEMAPHORE_ID=0;
    return;
end

if SEMAPHORE_INVALID_NAME(SEMAPHORE_NAME)
    RETURN_CODE = RETURN_CODE_TYPE.NO_ACTION;
    SEMAPHORE_ID=0;
	return;
end 

if CURRENT_VALUE<0 || CURRENT_VALUE>MAX_SEMAPHORE_VALUE
    RETURN_CODE = RETURN_CODE_TYPE.INVALID_PARAM;
    SEMAPHORE_ID=0;
    return;
end

if MAXIMUM_VALUE<0 || MAXIMUM_VALUE>MAX_SEMAPHORE_VALUE
    RETURN_CODE = RETURN_CODE_TYPE.INVALID_PARAM;
    SEMAPHORE_ID=0;
    return;
end

if CURRENT_VALUE > MAXIMUM_VALUE
    RETURN_CODE = RETURN_CODE_TYPE.INVALID_PARAM;
    SEMAPHORE_ID=0;
    return;
end

if QUEUING_DISCIPLINE ~= FIFO && QUEUING_DISCIPLINE ~= PRIORITY_ORDER
    RETURN_CODE = RETURN_CODE_TYPE.INVALID_PARAM;
    SEMAPHORE_ID=0;
    return;
end

if Current_Partition_STATUS.OPERATING_MODE == OPERATING_MODE_TYPE.NORMAL
    RETURN_CODE = RETURN_CODE_TYPE.INVALID_MODE;
    SEMAPHORE_ID=0;
    return;
end
       
ID = CREATE_SEMAPHORE_ID();

SEMA = SEMAPHORE_ATTRIBUTE_TYPE(0,0,0,0,0,0);      
SEMA.NAME = SEMAPHORE_NAME; 
SEMA.ID = ID;
SEMA.VALUE = CURRENT_VALUE;
SEMA.CURRENT_VALUE = CURRENT_VALUE;
SEMA.MAXIMUM_VALUE = MAXIMUM_VALUE;
SEMA.WAITING_PROCESSES = 0;
SEMA.SEMAPHORE_QUEUE = [];
        
index = numel(Semaphore_Set)+1;

Semaphore_Set{1,index} = SEMA;
Semaphore_NAME_Set(index) = SEMA.NAME;
Semaphore_ID_Set(index) = SEMA.ID;
        
SEMAPHORE_ID = SEMA.ID;
RETURN_CODE = RETURN_CODE_TYPE.NO_ERROR;

end

